const translations = {
    zh: {
        startingBrowser: '正在启动浏览器...',
        browserInitialized: '浏览器初始化完成',
        loggingIn: '正在登录小红书...',
        loginSuccessful: '登录成功',
        gettingProfileUrl: '正在获取个人主页 URL...',
        navigatingToPage: '正在导航到页面：{url}',
        profileUrlNotFound: '未找到个人主页 URL',
        waitingForPageLoad: '等待页面加载完成...',
        personalInfoReplaced: '个人信息已被替换为星号',
        clickingTab: '正在点击"{tab}"标签（第 {attempt} 次尝试）',
        pageFullyLoaded: '页面已完全加载',
        tabsFound: '找到标签列表',
        tabNotFound: '未找到"{tab}"标签',
        tabPosition: '"{tab}"标签位于第 {index} 个位置',
        tabSwitched: '已切换到"{tab}"标签',
        waitingForPageLoadAfterTabSwitch: '等待标签切换后页面加载完成...',
        tabClickError: '点击"{tab}"标签时出错（第 {attempt} 次尝试）：{error}',
        refreshingPageAndRetrying: '正在刷新页面并重试...',
        tabClickFailed: '点击"{tab}"标签失��',
        extractedVid: '提取的视频 ID：{vid}',
        videoExists: '视频 {vid} 已存在于数据库中',
        videoSrcNotFound: '未找到视频 {vid} 的源地址',
        videoAddedToDatabase: '视频 {vid} 已添加到数据库',
        videoPageError: '处理视频页面时出错：{error}',
        startingVideoDownload: '开始下载视频：{url}，保存路径：{path}',
        httpError: 'HTTP 错误：{status}',
        videoDownloadComplete: '视频下载完成，保存路径：{path}',
        videoDownloadError: '视频下载出错：{error}',
        startingImageDownload: '开始下载图片：{url}，保存路径：{path}',
        imageDownloadComplete: '图片下载完成，保存路径：{path}',
        imageDownloadError: '图片下载出错：{error}',
        startingDownloader: '开始下载器...',
        processingVideos: '正在处理{type}视频...',
        allContentProcessed: '所有内容处理完成',
        waitingForUserInput: '等待用户输入以保持浏览器开启...',
        loginTimeout: '登录超时',
        loginFailed: '登录失败',
        downloaderError: '下载器出错：{error}',
        closingBrowser: '正在关闭浏览器...',
        downloaderFinished: '下载器已完成',
        databaseCloseError: '关闭数据库连接时出错：{error}',
        databaseConnectionClosed: '数据库连接已关闭',
        // 添加更多翻译...
    },
    en: {
        startingBrowser: 'Starting browser...',
        browserInitialized: 'Browser initialized',
        loggingIn: 'Logging in to Xiaohongshu...',
        loginSuccessful: 'Login successful',
        gettingProfileUrl: 'Getting profile URL...',
        navigatingToPage: 'Navigating to page: {url}',
        profileUrlNotFound: 'Profile URL not found',
        waitingForPageLoad: 'Waiting for page to load...',
        personalInfoReplaced: 'Personal information replaced with asterisks',
        clickingTab: 'Clicking "{tab}" tab (Attempt {attempt})',
        pageFullyLoaded: 'Page fully loaded',
        tabsFound: 'Tabs found',
        tabNotFound: '"{tab}" tab not found',
        tabPosition: '"{tab}" tab is at position {index}',
        tabSwitched: 'Switched to "{tab}" tab',
        waitingForPageLoadAfterTabSwitch: 'Waiting for page to load after tab switch...',
        tabClickError: 'Error clicking "{tab}" tab (Attempt {attempt}): {error}',
        refreshingPageAndRetrying: 'Refreshing page and retrying...',
        tabClickFailed: 'Failed to click "{tab}" tab',
        extractedVid: 'Extracted video ID: {vid}',
        videoExists: 'Video {vid} already exists in the database',
        videoSrcNotFound: 'Video source not found for {vid}',
        videoAddedToDatabase: 'Video {vid} added to database',
        videoPageError: 'Error processing video page: {error}',
        startingVideoDownload: 'Starting video download: {url}, save path: {path}',
        httpError: 'HTTP error: {status}',
        videoDownloadComplete: 'Video download complete, save path: {path}',
        videoDownloadError: 'Video download error: {error}',
        startingImageDownload: 'Starting image download: {url}, save path: {path}',
        imageDownloadComplete: 'Image download complete, save path: {path}',
        imageDownloadError: 'Image download error: {error}',
        startingDownloader: 'Starting downloader...',
        processingVideos: 'Processing {type} videos...',
        allContentProcessed: 'All content processed',
        waitingForUserInput: 'Waiting for user input to keep browser open...',
        loginTimeout: 'Login timeout',
        loginFailed: 'Login failed',
        downloaderError: 'Downloader error: {error}',
        closingBrowser: 'Closing browser...',
        downloaderFinished: 'Downloader finished',
        databaseCloseError: 'Error closing database connection: {error}',
        databaseConnectionClosed: 'Database connection closed',
        // Add more translations...
    }
};

export function getTranslation(lang, key, params = {}) {
    if (!translations[lang] || !translations[lang][key]) {
        console.warn(`Translation missing for language: ${lang}, key: ${key}`);
        return key;
    }
    let translation = translations[lang][key];
    translation = translation.replace(/\{(\w+)\}/g, (match, key) => {
        return params.hasOwnProperty(key) ? params[key] : match;
    });
    return translation;
}